# 1.什么是迭代器?
# 迭代器指的是迭代取值的工具，迭代是一个重复的过程，每次重复
# 都是基于上一次的结果而继续的，单纯的重复并不是迭代

# 2.为何要有迭代器?
# 迭代器是用来迭代取值的工具，而涉及到把多个值循环取出来的类型
# 为了解决基于索引迭代器取值的局限性,python必须提供一种能够不依赖于索引的取值方式，这就是迭代器

# 3.什么是可迭代的对象?
# 但凡内置有__iter__方法的都称之为可迭代的对象

# 4.什么是迭代器对象？
# 内置有__next__方法并且内置有__iter__方法的对象

# 5.如何得到自定义的迭代器？
# 在函数内一旦存在yield关键字，调用函数并不会执行函数体代码，会返回一个生成器对象，生成器即自定义的迭代器。

# 6.多个叠加装饰器的加载顺序与执行顺序是？
# 自下而上
# 自上而下

# 7.什么是三元表达式？
# 语法格式： 条件成立时要返回的值 if 条件 else 条件不成立时要返回的值

# 8.递归的两个阶段是什么？
# 回溯：一层一层调用下去
# 递推：满足某种结束条件，结束递归调用，然后一层一层返回

# 9.什么面向过程的编程思想？优缺点是？
'''
核心是"过程"二字，过程即流程，指的是做事的步骤：先什么、再什么、后干什么
    优点：复杂的问题流程化、进而简单化
    缺点：扩展性非常差
'''

# 10.请列举5个或以上的内置函数。

# 11.表达式“[3] in [1, 2, 3, 4]”的值为_________？（1分）
'''
Flase
'''

# 12.转义字符’\n’的含义是________?（1分）
'''
换行
'''

# 13.任意长度的Python列表、元组和字符串中最后一个元素的下标为__________?（1分）
'''
-1
'''

# 14.Python语句''.join(list('hello world!'))执行的结果是____________?（1分）
'''
hello world!  ---> str
'''

# 15.Python语句list(range(1,10,3))执行结果为__________？（1分）
'''
[1, 4, 7]
'''

# 16.什么命令既可以删除列表中的一个元素，也可以删除整个列表？（1分）
'''
del
'''

# 17.已知a = [1, 2, 3]和b = [1, 2, 4]，那么id(a[1])==id(b[1])的执行结果为___________?（1分）
'''
True

小计数池   小整数池
'''
# a = [1, 2, 3]
# b = [1, 2, 4]

# 18.表达式 int('123') 的值为_________?（1分）
'''
123
'''

# 19.切片操作list(range(10))[::2]执行结果为?（1分）
'''
[0, 2, 4, 6, 8]
'''

# 标一下:
# 20.语句sorted([1, 2, 3], reverse=True) == reversed([1, 2, 3])执行结果为_________?（1分）
'''
False
'''

# 21.表达式 'ab' in 'acbed' 的值为________?（1分）
'''
False
'''

# 22.Python的内置函数_______可以返回列表、元组、字典、集合、字符串以及range对象中元素个数？（1分）
'''
len
'''

# 23.Python内置函数____________用来返回序列中的最大元素?（1分）
'''
max
'''

# 24.Python内置函数____________用来返回序列中的最小元素?（1分）
'''
min
'''

# 25.Python内置函数________________用来返回数值型序列中所有元素之和?（1分）
'''
sum
'''

# 26.已知列表对象x = ['11', '2', '3']，则表达式 max(x) 的值为___________?（1分）
# 判断的 字符串中数字 对应的 ascii表中对应的值
'''
3
'''

# 27.表达式 min(['11', '2', '3']) 的值为_________________?（1分）
# 判断的 字符串中数字 对应的 ascii表中对应的值
'''
11
'''

# 28.已知列表对象x = ['11', '2', '3']，则表达式max(x, key=len) 的值为___________?（1分）
'''
11
'''

# 29、表达式{1, 2, 3, 4} - {3, 4, 5, 6}的值为____________?（1分）
'''
{1, 2}
'''

# 30.表达式set([1, 1, 2, 3])的值为_____________?（1分）
'''
{1, 2, 3}
'''

# 31.假设re模块已导入，那么表达式 re.findall('(\d)\\1+', '33abcd112') 的值为_________？（1分）
import re

# 完全超纲: 一般不会这么用,
# re.findall('正则表达式', '匹配文本', '匹配模式')
# (\d):匹配一个0-9的数字  \1: 表示只找重复的值 33, 11,   \\1: 只拿重复值前面第一个   +: 匹配一个或多个
# 多年前有个正则题库（考研）中出的题，不是面试题
# print(re.findall('(\d)\\1+', '33abcd1122'))
# ['3', '1', '2']

# 32.语句 print(re.match('abc', 'defg')) 输出结果为____________?（1分）
'''
None
'''
# 匹配 文本中是否有 abc字符，若匹配成功返回对象，匹配不成功则返回None
# res = re.match('abc', 'abcdefg')
# 匹配成功的对象.group() 会将匹配的值取出
# print(res.group())


# 33.表达式 list(filter(lambda x: x%2==0, range(10))) 的值为_________?（1分）
'''
[0, 2, 4, 6, 8]
'''

# 34.表达式 isinstance('abc', str) 的值为_________?（1分）
# True

# 35.Python标准库random中的___________方法作用是从序列中随机选择1个元素?（1分）
# random.choice()

# 36.random模块中_____________方法的作用是将列表中的元素随机乱序?（1分）
# import random
# random.shuffle()

# 37.模块可以分为三类分别是什么（1分）
# 内置模块，第三方模块，自定义模块

# 38.包的作用是什么?（1分）
# 用于管理模块

# 39.__init__.py文件有什么用?（1分）
# __init__.py 控制着包的导入行为

# 40.使用相对导入时的注意事项（1分）
# 参照当前所在文件的文件夹为起始开始查找

# 41.模块的搜索顺序（2分）
# 内存>内置>自定义

# 42.有如下目录（2分）
# 	bin
# 		start.py
# 	core
# 		src.py
# 	在start.py中有以下代码
# 	import core.src
# 	问:在pycharm中正常执行 而在cmd中执行报错 为什么?
# 找不到core模块

# 43.datetime.now() 与 time.time() 的区别是什么（2分）
# 一个是格式化时间，一个是时间戳

# 44.sys.argv()有什么用（2分）
# 可以获取终端输入的参数

# 45.有字符串'email1:378533872@qq.com email2:333312312@163.com eamil3:alexsb123@gmail.com'（2分）
# 	匹配出所有的邮箱地址：['378533872@qq.com', '333312312@163.com', 'alexsb123@gmail.com']

str1 = 'email1:378533872@qq.com email2:333312312@163.com eamil3:alexsb123@gmail.com'
import re

# 会先匹配到文本中所有的 : 号位置    378533872@qq.com
print(re.findall(r":(.*?@.*?com)", str1))
print(re.findall(':(.*?@.*?com)', str1))
# 46.编写一个xml文档,存储三个好友的信息（2分）
'''XML
<user_info>
    <user1>
        <name>tank</name>
        <age>17</age>
        <sex>male</sex>
    </user1>
</user_info>
...
'''

# 47.编写一个json文档,存储三个好友的信息（2分）
'''
{"name": "tank", "age": 17, "sex": "male"}
'''

# 48.json模块中的load 和 loads的区别（2分）
# load内部可以接受f句柄，并自动调用f.read()


# 49.logging模块的默认日志级别是什么（2分）
'''
logging.debug('debug message')
logging.info('info message')
logging.warn('warn message')
logging.error('error message')
logging.critical('critical message')
'''

# 50.在项目中使用logging的步骤（2分）

# 51.可以用来做MD5加密的模块是哪个？（2分）
# hashlib

# 52.os和sys模块的作用？（2分）
# os是操作系统相关的，sys是与python解释器进行交互的；

# 53.如何生成一个随机数？（2分）
'''
课堂上例子
'''

# 54.如何使用python删除一个文件？（2分）
# 使用os.remove(filename)或者os.unlink(filename);

# 55.json序列化时，可以处理的数据类型有哪些？如何定制支持datetime类型？（2分）
# 超纲
'''
json模块支持python的数据类型
+-------------------+---------------+
    | Python            | JSON          |
    +===================+===============+
    | dict              | object        |
    +-------------------+---------------+
    | list, tuple       | array         |
    +-------------------+---------------+
    | str               | string        |
    +-------------------+---------------+
    | int, float        | number        |
    +-------------------+---------------+
    | True              | true          |
    +-------------------+---------------+
    | False             | false         |
    +-------------------+---------------+
    | None              | null          |
    +-------------------+---------------+
'''
# datetime ---> str
import json
from datetime import datetime

# print(datetime.now())
# print(type(datetime.now()))
'''
dict1 = {
    'list1': [1, 2],
    'str1': '哈哈哈哈哈',
    'tuple1': (1, 2),
    # json不支持datetime对象的序列化，可以将对象转为str字符串类型
    'time': str(datetime.now())
}

res = json.dumps(dict1)
print(res)
'''


# 扩展
'''
# 通过继承，并派生出新的可支持序列化类型
class MyJson(json.JSONEncoder):
    def default(self, o):
        # print(o)  # o ---> datetime.now() 交给父类的default会报错

        # 在交给父类之前做一些事情
        if isinstance(o, datetime):
            return o.strftime('%Y-%m-%d %X')

        # 将修改后的self与o返回给父类的default方法，继承父类default方法的功能
        return super().default(self, o)


dict1 = {
    'list1': [1, 2],
    'str1': '哈哈哈哈哈',
    'tuple1': (1, 2),
    'time': datetime.now()
}

# 指向自己定制的MyJson类
res = json.dumps(dict1, cls=MyJson)  # 默认默认cls=JSONEncoder
print(res)
'''

# 56.json序列化时，默认遇到中文会转换成unicode，如果想要保留中文怎么办？（2分）
# ensure_ascii=False

# 57. 你工作中都用过哪些内置模块？（2分）
# re,json,hashlib,time,datetime,functools
import json

# 58.functools模块有什么用处 ？（2分）
'''
可以把函数作为输入参数，对函数内部进行封装，最后返回也是函数。
'''

# 59.如何在一个函数里面设置一个全局的变量？
'''
global
'''

# 60.什么是深拷贝与浅拷贝？
'''
深拷贝是将对象本身复制给另一个对象。这意味着如果对对象的副本进行更改时不会影响原对象。在 Python 中，我们使用 deepcopy（）函数进行深拷贝。
浅拷贝是将对象的引用复制给另一个对象。因此，如果我们在副本中进行更改，则会影响原对象。使用 copy（）函数进行浅拷贝
'''
